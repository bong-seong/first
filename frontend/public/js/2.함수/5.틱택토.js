console.log( 'js 실행' )


// 4. 배열선언 [ 버튼의 상태를 저장하는 배열 ]
let 버튼목록현황 = [ null, null, null, null, null, null, null, null, null ]

// 1. 함수 정의/만들기
function 클릭이벤트( 버튼번호 ){
// function : 함수 정의할 때 사용되는 키워드
// 클릭이벤트 : 함수명 [ 아무거나 ]
// ( ) : 인수 - 해당함수를 호출할 때 함수로 들어오는 값/데이터
// return : 반환값 - 해당 함수가 종료될 때 호출했던 곳으로 보내는 값/데이터 
	console.log( 버튼번호 + '클릭' )
	console.log( 버튼목록현황 )
	
	// 1. 선택된번호와 알모양을 알두기 함수 전달하고 반환이 false 이면 알두기 실패 / true 성공 후 컴퓨터 차례
		// ! : 반대/부정 false=>true
	if( !알두기( 버튼번호, 'O' ) ) { return; }
	if( 결과() ) {return ;}
	
	
	// 1. 난수 생성 
	// 무한루프 [ 정상적으로 알 두기 전까지 ]
	while( true ){
		let 컴퓨터번호 = parseInt( Math.random()*9 )+1 // 1 ~ 10 실수이기에 9.99999 까지나옴 [ 실제 나오는 수 0 ~ 9]
		if ( 알두기( 컴퓨터번호, 'X') ){ 
			if( 결과() ){ return; } 
				return; 
			}
		}
}




// 2. 알두기 [ 반환값 : 알 정상적으로 두었는지 확인 false:실패:1  true:성공:1 -> 신호 ]
function 알두기( 버튼번호, 알모양 ){
	// 1. <div> 버튼 목록 가져오기 [ div 9개 호출 ] - querySelectorAll 해당 식별자 전부 가져옴
	let 버튼목록 = document.querySelectorAll('.버튼')
	// 3.인덱스는 0부터시작, 번호는 1부터시작 그렇기때문에 버튼번호-1 하여 0부터 시작 할 수 있게 
	// 클릭된 div 찾기 
	// 5. 배열에 상태 변경
	// 1. 이미 선택된 번호이면 불가능
	// 2. 배열에 상태 변경 // * 만약에 빈자리가 아니면 
	if( 버튼목록현황[버튼번호-1] != null ){ return false; }
		
	버튼목록[버튼번호-1].innerHTML = 알모양 ; 버튼목록현황[버튼번호-1] = 알모양 ; 
	// 4. 성공 true 반환 
	return true; 	
}		 


// 3. 결과 함수 [ 사람/컴퓨터 알두기 성공했을때 1. 승리 2.패배 3.무승부[빈자리가 없으면] ]
function 결과(){
	
	// 1. 가로 승리자 
		// * 배열의 초기값이 모두 null 이기 때문에 nnull 제외
	
	for( let i=0 ; i<=6; i+=3 ){ // i는 0부터 6까지 3씩증가 반복처리 -> 3회 반복 [ 0 3 6 ]
		if( 버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+1] && 버튼목록현황[i+1] == 버튼목록현황[i+2] ){
			결과출력( 버튼목록현황[i] )
			return true;
		}
	}
	
	// 2. 세로 승리자 
	for( let i=0 ; i<=2 ; i++ ){
		if( 버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+3] && 버튼목록현황[i+3] == 버튼목록현황[i+6] ){
			결과출력( 버튼목록현황[i] )
			return true;
		}
	}
	
	// 3. 대각선 승리자
	if( 버튼목록현황[0] != null && 버튼목록현황[0] == 버튼목록현황[4] && 버튼목록현황[4] == 버튼목록현황[8] ){
		결과출력( 버튼목록현황[i] )
		return true;
	}
	if( 버튼목록현황[2] != null && 버튼목록현황[2] == 버튼목록현황[4] && 버튼목록현황[4] == 버튼목록현황[6] ){
		결과출력( 버튼목록현황[i] )
		return true;
	}
	
	
	// 4. 무승부 판단
	let 빈자리수 = 0;
	for( 버튼 of 버튼목록현황 ){
		if( 버튼 == null ){ 빈자리수++; }
	}
	
		// * 배열의 반복문이 모두 종료 되었을떄 null 하나도 존재하지 않으면
	if( 빈자리수 == 0 ) {	 
		결과출력('-')
		return true; 
	}
	
	return false; 
}


/*

	버튼목록현황
		[0]		[1]		[2]
		
		[3]		[4]		[5]
		
		[6]		[7]		[8]
		
		승리판단 3가지
			1. 가로로 이겼을때 : 0 1 2 / 3 4 5 / 6 7 8 모양이 모두 동일 할 경우
			2. 세로로 이겼을때 : 0 3 6 / 1 4 7 / 2 5 8 모양이 모두 동일 할 경우
			3. 대각선으로 이겼을때 : 0 4 8 / 2 4 6
		무승부 : 알이 모두 존재 했을때 = null 0개일때 -> 빈자리가 없다.
		   

 */


// 4. 게임 승리자 출력
function 결과출력 ( 알모양 ){
	
	// 1. 출력할 위치의 <div> 가져오기
	let 게임판 = document.querySelector('.게임판')
	
	// 2. 
	if ( 알모양 == '-' ){ // 만약에 알모양이 '-' 이면 무승부
		게임판.innerHTML = '무승부'
	}else{ // 만약에 알모양이 '-' 이 아니면 알모양 + 승리
		게임판.innerHTML = 알모양 + '승리'
	}
}



// 2. 함수 호출 :
	// 1. js : 함수명()
	// 2. html : <마크업 이벤트속성="함수명()" />
